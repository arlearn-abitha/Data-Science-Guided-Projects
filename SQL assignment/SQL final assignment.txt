Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

	ANSWER: There are 10000 records in each table below.
	
	i. Attribute table   = SELECT COUNT(*) AS Number_Of_Records FROM attribute; [10000]
	ii. Business table   = SELECT COUNT(*) AS Number_Of_Records FROM business; [10000]
	iii. Category table  = SELECT COUNT(*) AS Number_Of_Records FROM category; [10000]
	iv. Checkin table    = SELECT COUNT(*) AS Number_Of_Records FROM checkin; [10000]
	v. elite_years table = SELECT COUNT(*) AS Number_Of_Records FROM elite_years; [10000]
	vi. friend table     = SELECT COUNT(*) AS Number_Of_Records FROM friend; [10000]
	vii. hours table     = SELECT COUNT(*) AS Number_Of_Records FROM hours; [10000]
	viii. photo table    = SELECT COUNT(*) AS Number_Of_Records FROM photo; [10000]
	ix. review table     = SELECT COUNT(*) AS Number_Of_Records FROM review; [10000]
	x. tip table         = SELECT COUNT(*) AS Number_Of_Records FROM tip; [10000]
	xi. user table       = SELECT COUNT(*) AS Number_Of_Records FROM user; [10000]
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

	i. Business [10000]     = SELECT COUNT(DISTINCT id) AS Total_distinct_records FROM business; 
	ii. Hours [1562]      	= SELECT COUNT(DISTINCT business_id) AS Total_distinct_records FROM hours;
	iii. Category [2643]  	= SELECT COUNT(DISTINCT business_id) AS Total_distinct_records FROM category;
	iv. Attribute [1115]  	= SELECT COUNT(DISTINCT business_id) AS Total_distinct_records FROM attribute;
	v. Review [10000]     	= SELECT COUNT(DISTINCT id) AS Total_distinct_records FROM review;
	vi. Checkin [493]    	= SELECT COUNT(DISTINCT business_id) AS Total_distinct_records FROM checkin;
	vii. Photo [10000]    	= SELECT COUNT(DISTINCT id) AS Total_distinct_records FROM photo;
	viii. Tip [537]      	= SELECT COUNT(DISTINCT user_id) AS Total_distinct_records FROM tip;
	ix. User [10000]       	= SELECT COUNT(DISTINCT id) AS Total_distinct_records FROM user;
	x. Friend [11]      	= SELECT COUNT(DISTINCT user_id) AS Total_distinct_records FROM friend;
	xi. Elite_years [2780]	= SELECT COUNT(DISTINCT user_id) AS Total_distinct_records FROM elite_years; 

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: "no"
	
	
	SQL code used to arrive at answer: 
	
	SELECT * FROM user WHERE id IS NULL;
	SELECT * FROM user WHERE name IS NULL;
	SELECT * FROM user WHERE review_count IS NULL;										
	SELECT * FROM user WHERE yelping_since IS NULL;
	SELECT * FROM user WHERE useful IS NULL;
	SELECT * FROM user WHERE funny IS NULL;
	SELECT * FROM user WHERE cool IS NULL;
	SELECT * FROM user WHERE fans IS NULL;
	SELECT * FROM user WHERE average_stars IS NULL;
	SELECT * FROM user WHERE compliment_hot IS NULL;
	SELECT * FROM user WHERE compliment_more IS NULL;
	SELECT * FROM user WHERE compliment_profile IS NULL;
	SELECT * FROM user WHERE compliment_cute IS NULL;
	SELECT * FROM user WHERE compliment_list IS NULL;
	SELECT * FROM user WHERE compliment_note IS NULL;
	SELECT * FROM user WHERE compliment_plain IS NULL;
	SELECT * FROM user WHERE compliment_cool IS NULL;
	SELECT * FROM user WHERE compliment_funny IS NULL;
	SELECT * FROM user WHERE compliment_writer IS NULL;
	SELECT * FROM user WHERE compliment_photos IS NULL;

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082 
		
		SELECT MIN(stars), MAX(stars), AVG(stars) FROM review;
	
	ii. Table: Business, Column: Stars
	
		min: 1.0	max: 5.0	avg: 3.6549
		
		SELECT MIN(stars), MAX(stars), AVG(stars) FROM business;
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
		SELECT MIN(likes), MAX(likes), AVG(likes) FROM tip;
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
		SELECT MIN(count), MAX(count), AVG(count) FROM checkin;
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995
		
		SELECT MIN(Review_count), MAX(Review_count), AVG(Review_count) FROM User;


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:  SELECT city, SUM(review_count) AS reviews FROM business GROUP BY city ORDER BY reviews DESC;
	
	Copy and Paste the Result Below:	
+-----------------+---------+
| city            | reviews |
+-----------------+---------+
| Las Vegas       |   82854 |
| Phoenix         |   34503 |
| Toronto         |   24113 |
| Scottsdale      |   20614 |
| Charlotte       |   12523 |
| Henderson       |   10871 |
| Tempe           |   10504 |
| Pittsburgh      |    9798 |
| Montréal        |    9448 |
| Chandler        |    8112 |
| Mesa            |    6875 |
| Gilbert         |    6380 |
| Cleveland       |    5593 |
| Madison         |    5265 |
| Glendale        |    4406 |
| Mississauga     |    3814 |
| Edinburgh       |    2792 |
| Peoria          |    2624 |
| North Las Vegas |    2438 |
| Markham         |    2352 |
| Champaign       |    2029 |
| Stuttgart       |    1849 |
| Surprise        |    1520 |
| Lakewood        |    1465 |
| Goodyear        |    1155 |
+-----------------+---------+
(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

	SELECT stars AS star_rating, COUNT(review_count) AS count 
	FROM business 
	WHERE city = 'Avon' 
	GROUP BY star_rating
	ORDER BY star_rating;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
	+-------------+-------+
	| star_rating | count |
	+-------------+-------+
	|         1.5 |     1 |
	|         2.5 |     2 |
	|         3.5 |     3 |
	|         4.0 |     2 |
	|         4.5 |     1 |
	|         5.0 |     1 |
	+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:

	SELECT stars AS star_rating, COUNT(review_count) AS count 
	FROM business 
	WHERE city = 'Beachwood' 
	GROUP BY star_rating
	ORDER BY star_rating;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
	+-------------+-------+
	| star_rating | count |
	+-------------+-------+
	|         2.0 |     1 |
	|         2.5 |     1 |
	|         3.0 |     2 |
	|         3.5 |     2 |
	|         4.0 |     1 |
	|         4.5 |     2 |
	|         5.0 |     5 |
	+-------------+-------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer: 
	
	SELECT name, review_count FROM user
	ORDER BY review_count DESC
	LIMIT 3;
		
	Copy and Paste the Result Below:
										
	+--------+--------------+
	| name   | review_count |
	+--------+--------------+
	| Gerald |         2000 |
	| Sara   |         1629 |
	| Yuri   |         1339 |
	+--------+--------------+


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
	MY FINDINGS & INTERPRETATION: It is very clear, irrespective of how many number of reviews an individual may post, they gain fans with authenticity and honesty. 
	1) Amy has posted 609 reviews in the span of 14 years and she has 503 fans, which shows that fans love to see her write.
	2) Gerald has posted 2000 reviews in the span of 9 years and he has won only 253 fans. Here we also should consider how people actively lookout in yelp for reviews. It can also be a case that he must have posted reviews about food joints which are not so famous and people were least bothered to try it. 
	
	SELECT name, review_count, fans, yelping_since, (DATE('now') - yelping_since) AS years
	FROM user 
	ORDER BY fans DESC;
	
+-----------+--------------+------+---------------------+-------+
| name      | review_count | fans | yelping_since       | years |
+-----------+--------------+------+---------------------+-------+
| Amy       |          609 |  503 | 2007-07-19 00:00:00 |    14 |
| Mimi      |          968 |  497 | 2011-03-30 00:00:00 |    10 |
| Harald    |         1153 |  311 | 2012-11-27 00:00:00 |     9 |
| Gerald    |         2000 |  253 | 2012-12-16 00:00:00 |     9 |
| Christine |          930 |  173 | 2009-07-08 00:00:00 |    12 |
| Lisa      |          813 |  159 | 2009-10-05 00:00:00 |    12 |
| Cat       |          377 |  133 | 2009-02-05 00:00:00 |    12 |
| William   |         1215 |  126 | 2015-02-19 00:00:00 |     6 |
| Fran      |          862 |  124 | 2012-04-05 00:00:00 |     9 |
| Lissa     |          834 |  120 | 2007-08-14 00:00:00 |    14 |
| Mark      |          861 |  115 | 2009-05-31 00:00:00 |    12 |
| Tiffany   |          408 |  111 | 2008-10-28 00:00:00 |    13 |
| bernice   |          255 |  105 | 2007-08-29 00:00:00 |    14 |
| Roanna    |         1039 |  104 | 2006-03-28 00:00:00 |    15 |
| Angela    |          694 |  101 | 2010-10-01 00:00:00 |    11 |
| .Hon      |         1246 |  101 | 2006-07-19 00:00:00 |    15 |
| Ben       |          307 |   96 | 2007-03-10 00:00:00 |    14 |
| Linda     |          584 |   89 | 2005-08-07 00:00:00 |    16 |
| Christina |          842 |   85 | 2012-10-08 00:00:00 |     9 |
| Jessica   |          220 |   84 | 2009-01-12 00:00:00 |    12 |
| Greg      |          408 |   81 | 2008-02-16 00:00:00 |    13 |
| Nieves    |          178 |   80 | 2013-07-08 00:00:00 |     8 |
| Sui       |          754 |   78 | 2009-09-07 00:00:00 |    12 |
| Yuri      |         1339 |   76 | 2008-01-03 00:00:00 |    13 |
| Nicole    |          161 |   73 | 2009-04-30 00:00:00 |    12 |
+-----------+--------------+------+---------------------+-------+
(Output limit exceeded, 25 of 10000 total rows shown)	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: 'Love' - 1780 times
			'Hate' - 232  times
	While writing review people have used the word 'Love' for the total of 1780 times and 'Hate' is used only 232 times.

	
	SQL code used to arrive at answer:
	
	SELECT count(text) FROM review 
	WHERE text LIKE '%Love%';
	
	SELECT count(text) FROM review 
	WHERE text LIKE '%Hate%';

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	SELECT name, fans FROM user 
	ORDER BY fans DESC
	LIMIT 10;
	
	Copy and Paste the Result Below:

	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
	I have considered "Toronto" as the city for the analysis and I chose "Restaurants" as my category.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
	
	Yes, they do have different distribution of hours. 

ii. Do the two groups you chose to analyze have a different number of reviews?
    	
	Yes. The restaurants with 4-5 stars has more review_count compared to 2-3 reviews.  
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
	
	Well to me it seem like, the restaurants with less operating time have scored best star_review ratings compared to those who stay open from morning till night.
	Location doesn't make sense when we are looking at the data in a table format. To make sense of location as a parameter, we need to use vizualization tools such as Tableau or power BI.


SQL code used for analysis:

	SELECT B.name, B.review_count, B.city, B.postal_code, H.hours,
	CASE
		WHEN B.stars BETWEEN 2 AND 3 THEN '2-3 stars'
		WHEN B.stars BETWEEN 4 AND 5 THEN '4-5 stars'
	END AS star_rating

	FROM business B 
	INNER JOIN hours H ON B.id = H.business_id 
	INNER JOIN category C ON C.business_id = B.id

	WHERE (B.city == 'Toronto' AND C.category LIKE 'Restaurants') AND 
	(B.stars BETWEEN 2 AND 3 OR B.stars BETWEEN 4 AND 5)
	ORDER BY star_rating ASC;	
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
         When I grouped them based on is_open column, it gave me two restaurant names. One being open and other being closed.
		 
		+---------------+--------------+---------+-------------+---------+----------------------+-------------+
		| name          | review_count | city    | postal_code | is_open | hours                | star_rating |
		+---------------+--------------+---------+-------------+---------+----------------------+-------------+
		| 99 Cent Sushi |            5 | Toronto | M5B 2E5     |       0 | Saturday|11:00-23:00 | 2-3 stars   |
		| Edulis        |           89 | Toronto | M5V         |       1 | Saturday|18:00-23:00 | 4-5 stars   |
		+---------------+--------------+---------+-------------+---------+----------------------+-------------+
         
ii. Difference 2:
         
		 The main difference which is very clear to me is Edulis is open on weekend and that must be one of the prime reason why it has more review count and better star rating.
         
         
SQL code used for analysis:

	SELECT B.name, B.review_count, B.city, B.postal_code, B.is_open, H.hours,
	CASE
		WHEN B.stars BETWEEN 2 AND 3 THEN '2-3 stars'
		WHEN B.stars BETWEEN 4 AND 5 THEN '4-5 stars'
	END AS star_rating

	FROM business B 
	INNER JOIN hours H ON B.id = H.business_id 
	INNER JOIN category C ON C.business_id = B.id

	WHERE (B.city == 'Toronto' AND C.category LIKE 'Restaurants') AND 
	(B.stars BETWEEN 2 AND 3 OR B.stars BETWEEN 4 AND 5)
	GROUP BY is_open
	ORDER BY star_rating ASC;
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
	The type of analysis that I want to do is to check the rating based on whether Restaurants provide free wifi or not.

         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
    
	1) I will be choosing the same city i.e., Toronto for my analysis.
	2) Category will be Restaurants.
	3) I am chosing WiFi as my attribute to see how people like going to places? Is it because of Free WiFi or just the food. 
	4) I am considering star_ratings into four categories i.e.,
		a) 1.0 to 2.0 - Poor
		b) 2.1 to 3.0 - Average
		c) 3.1 to 4.0 - Good
		d) 4.1 to 5.0 - Excellent
		
iii. Output of your finished dataset:
      
	  The interesting part of my result is that, 
		a) The restaurants which do not provide free WiFi have better review count and better stars.
		
		+----------------------------------------+--------------+---------+-------------+---------+-------+-------+-------------+
		| name                                   | review_count | city    | postal_code | is_open | name  | value | star_rating |
		+----------------------------------------+--------------+---------+-------------+---------+-------+-------+-------------+
		| Bootleggers Modern American Smokehouse |          431 | Phoenix | 85028       |       1 | WiFi  | no    | Good        |
		| Five Guys                              |           63 | Phoenix | 85008       |       1 | WiFi  | no    | Good        |
		| Gallagher's                            |           60 | Phoenix | 85024       |       1 | WiFi  | free  | Average     |
		| McDonald's                             |            8 | Phoenix | 85004       |       1 | WiFi  | free  | Poor        |
		| Charlie D's Catfish & Chicken          |            7 | Phoenix | 85034       |       0 | WiFi  | no    | Excellent   |
		+----------------------------------------+--------------+---------+-------------+---------+-------+-------+-------------+
         
iv. Provide the SQL code you used to create your final dataset:

SELECT B.name, B.review_count, B.city, B.postal_code, B.is_open, a.name, a.value,

CASE
    WHEN B.stars BETWEEN 1.0 AND 2.0 THEN 'Poor'
    WHEN B.stars BETWEEN 2.1 AND 3.0 THEN 'Average'
	WHEN B.stars BETWEEN 3.1 AND 4.0 THEN 'Good'
    WHEN B.stars BETWEEN 4.1 AND 5.0 THEN 'Excellent'
END AS star_rating

FROM business B 
INNER JOIN category C ON C.business_id = B.id
INNER JOIN attribute a ON a.business_id = B.id

WHERE ( B.City == 'Phoenix' AND C.category LIKE 'Restaurants') AND (a.name == 'WiFi')
ORDER BY review_count DESC;